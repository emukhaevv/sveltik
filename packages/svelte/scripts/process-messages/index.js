// @ts-check
import fs from "node:fs";

/** @type {Record<string, Record<string, { messages: string[], details: string | null }>>} */
const messages = {};
const seen = new Set();

const DIR = "../../documentation/docs/98-reference/.generated";

fs.rmSync(DIR, { recursive: true, force: true });
fs.mkdirSync(DIR);

const categories = fs.readdirSync("messages");

for (const category of categories) {
  if (category.startsWith(".")) continue;

  messages[category] = {};

  for (const file of fs.readdirSync(`messages/${category}`)) {
    if (!file.endsWith(".md")) continue;

    const markdown = fs
      .readFileSync(`messages/${category}/${file}`, "utf-8")
      .replace(/\r\n/g, "\n");

    const sorted = [];
    const details = [];

    for (const match of markdown.matchAll(
      /## ([\w]+)\n\n([^]+?)(?=$|\n\n## )/g
    )) {
      const [_, code, text] = match;

      if (seen.has(code)) {
        throw new Error(`Duplicate message code ${category}/${code}`);
      }

      sorted.push({ _, code });

      const sections = text.trim().split("\n\n");

      while (!sections[sections.length - 1].startsWith("> ")) {
        details.push(sections.pop());
      }

      if (!sections.length) {
        throw new Error("No message text");
      }

      seen.add(code);
      messages[category][code] = {
        messages: sections.map((section) =>
          section.replace(/^> /gm, "").replace(/^>\n/gm, "\n")
        ),
        details: details.join("\n\n"),
      };
    }

    sorted.sort((a, b) => (a.code < b.code ? -1 : 1));

    fs.writeFileSync(
      `messages/${category}/${file}`,
      sorted.map((x) => x._.trim()).join("\n\n") + "\n"
    );
  }

  fs.writeFileSync(
    `${DIR}/${category}.md`,
    "<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n" +
      Object.entries(messages[category])
        .map(([code, { messages, details }]) => {
          const chunks = [
            `### ${code}`,
            ...messages.map((message) => "```\n" + message + "\n```"),
          ];

          if (details) chunks.push(details);

          return chunks.join("\n\n");
        })
        .sort()
        .join("\n\n") +
      "\n"
  );
}
